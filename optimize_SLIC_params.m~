%% optparam_sunsal_mscale
% =========================================================================
%
% Optimize superpixel parameters for all methods
% 
% Written by: Ricardo Borsoi, 2017
%   
%   Included a multiscale spatial regularization method based on the 
%   superpixel decomposition of the HSI, comparing with the SUnSAL 
%   and SUnSAL-TV results.
%   
% 
% 
% 
% =========================================================================

close all
clear all

mkdir('examples/param_ranges')



% need A, XT and Y from both examples and SNRs

name   = 'Mscale-SprPx';
% range1 = [ 1e-4 3e-4 5e-4 7e-4   1e-3 3e-3 5e-3 7e-3   1e-2 3e-2 5e-2  ]; % lambda1_sp
% range2 = [ 1e-3 3e-3 5e-3 7e-3   1e-2 3e-2 5e-2 7e-2   1e-1 ]; % lambda2_sp
% range3 = [                7e-2   1e-1 3e-1 5e-1 7e-1   1e-0 3e-0 5e-0 7e-0   1e+1 3e+1 ]; % beta
% slic_size = 5;
% slic_reg  = 0.01;

range1 = [ 4  4.5  5  5.5  6  6.5  7  7.5  8  8.5  9]; % slic_size
range2 = [ 0.00005 0.000075 0.0001 0.00025 0.0005 0.00075 0.00125 0.0025 0.005 0.0075 0.01 0.02 0.05]; % slic_reg


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

addpath mat_data

load example1_snr20_data; exName = '_DC1'; lambda1_sp = ; lambda2_sp = ; beta = ;
% load example1_snr30_data; exName = '_DC1'; lambda1_sp = ; lambda2_sp = ; beta = ;
% load example1_snr40_data; exName = '_DC1'; lambda1_sp = ; lambda2_sp = ; beta = ;
% load example0_snr20_data; exName = '_DC0'; lambda1_sp = 0.03; lambda2_sp = 0.1; beta = 30;
% load example0_snr30_data; exName = '_DC0'; lambda1_sp = 0.007; lambda2_sp = 0.05; beta = 10;
% load example0_snr40_data; exName = '_DC0'; lambda1_sp = 1e-3; lambda2_sp = ; beta = ;
% load example4_snr20_data; exName = '_DC4'; lambda1_sp = ; lambda2_sp = ; beta = ;
% load example4_snr30_data; exName = '_DC4'; lambda1_sp = ; lambda2_sp = ; beta = ;
% load example4_snr40_data; exName = '_DC4'; lambda1_sp = ; lambda2_sp = ; beta = ;

%             lambda1_sp = range1(i);
%             lambda2_sp = range2(j);
%             beta       = range3(k);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% pre-processing for superpixels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


addpath SLIC_DimensionReduction
addpath SSSE
addpath vlfeat-0.9.20
run('vlfeat-0.9.20/toolbox/vl_setup')






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Perform the optimization
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SRE_mtx = zeros(length(range1), length(range2));



for q=1:length(range2)
    for r=1:length(range1)

        if strcmp(name, 'SUnSAL')
%             lambda = range1(i);
%             [X_hat_l1] =  sunsal(A,Y,'lambda',lambda,'ADDONE','no','POSITIVITY','yes', ...
%                                 'TOL',1e-4, 'AL_iters',2000,'verbose','yes');
%             SRE_mtx(i,j,k) = 10*log10(norm(XT,'fro')/norm(X_hat_l1-XT,'fro'));



        elseif strcmp(name, 'SUnSAL-TV')
%             lambda    = range1(i);
%             lambda_TV = range2(j);
%             [X_hat_tv,res,rmse_ni] = sunsal_tv(A,Y,'MU',0.05,'POSITIVITY','yes','ADDONE','no', ...
%                                            'LAMBDA_1',lambda,'LAMBDA_TV', lambda_TV, 'TV_TYPE','niso',...
%                                            'IM_SIZE',[nl,nc],'AL_ITERS',200, 'TRUE_X', XT,  'VERBOSE','yes');
% 
%             SRE_mtx(i,j,k) = 10*log10(norm(XT,'fro')/norm(X_hat_tv-XT,'fro')); 



        elseif strcmp(name, 'Mscale-SprPx')
            
            
            slic_size = range1(r);
            slic_reg  = range2(q);
            
            
            Y2 = reshape(Y', nl, nc, L);   
            Y2a = Y2;

            % reorder and rescale data into 2-D array
            [numRows,numCols,numSpectra] = size(Y2);
            scfact = mean(reshape(sqrt(sum(Y2.^2,3)), numRows*numCols, 1));
            Y2 = Y2./scfact;
            imgVec = reshape(Y2, [numRows*numCols numSpectra]);
            
            % compute superpixels
            disp('Computing SLIC Superpixels...');
            spSegs = vl_slic(single(Y2), slic_size, slic_reg);
            numSuperpixels = double(max(spSegs(:)))+1; 

            % Unmix the superpixels
            Y3 = zeros(size(Y2));
            avg_superpx = zeros(1, numSuperpixels+1, L);

            for i=0:numSuperpixels
                [rowi, coli] = find(spSegs==i);
                
                for j=1:length(rowi)
                    % Averages all pixels inside each superpixel
                    if j == 1
                        avg_superpx(1,i+1,:) = (1/length(rowi)) * Y2a(rowi(j),coli(j),:);
                    else
                        avg_superpx(1,i+1,:) = avg_superpx(1,i+1,:) + (1/length(rowi)) * Y2a(rowi(j),coli(j),:);
                    end
                end
            
                % This is optional (for visualization)
                for j=1:length(rowi)
                    Y3(rowi(j),coli(j),:) = avg_superpx(1,i+1,:);
                end
            end

%             figure, imagesc(Y2(:,:,1))
%             figure, imagesc(Y3(:,:,1))
    
%             lambda1_sp = range1(i);
%             lambda2_sp = range2(j);
%             beta       = range3(k);

            % Unmix each superpixel individually
            [X_hat_l1_suppx] = sunsal(A,squeeze(avg_superpx)','lambda',lambda1_sp,'ADDONE','no','POSITIVITY','yes', ...
                                   'TOL',1e-4, 'AL_iters',2000,'verbose','yes');
            % Re-attribute the abundances for the entire matrix
            temp = zeros(size(Y2,1), size(Y2,2), n);
            for l=0:numSuperpixels
                [rowi, coli] = find(spSegs==l);
                % Attributes unmixing result to all pixels in a voxel
                for m=1:length(rowi)
                    temp(rowi(m),coli(m),:) = X_hat_l1_suppx(:,l+1);
                end
            end
            X_hat_l1_spreg = reshape(temp, [size(Y2,1)*size(Y2,2) n])';
            % constrained least squares l2-l1                
            [X_hat_l1_spreg] =  sunsal_spreg(A,Y,X_hat_l1_spreg,beta,'lambda',lambda2_sp,'ADDONE','no','POSITIVITY','yes', ...
                                'TOL',1e-4, 'AL_iters',2000,'verbose','yes');

            SRE_mtx(r,q) = 10*log10(norm(XT,'fro')/norm(X_hat_l1_spreg-XT,'fro'));



        end



    end

end



%% Save parameter surface

save(strcat('mat_data/param_surface_SLIC_',name,'_SNR',num2str(SNR),exName), 'SRE_mtx', 'range1', 'range2')

% Compute optimal value
[maxval, minidx] = max( SRE_mtx(:) );
[pos1, pos2] = ind2sub( size(SRE_mtx), minidx );



range1(pos1)
range2(pos2)




